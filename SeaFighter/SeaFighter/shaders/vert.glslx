#version 430

// Model/view/projection matrix
layout(location = 0) uniform mat4 mvp;

// Per-vertex attributes
layout(location = 0) in vec3 pos; // World-space position
layout(location = 1) in vec3 normal; // World-space normal

layout(location = 1) uniform vec3 view_pos;
layout(location = 3) uniform float time;

// Data to pass to fragment shader
out vec3 fragPos;
out vec3 fragNormal;

void main() {
	// Transform 3D position into on-screen position
    //gl_Position = mvp * vec4(pos, 1.0);
    vec3 finalPos = pos + vec3(0.0 , sin(pos.y * 10.0 + time * 2.0) * 0.007, 0.0) ;
    gl_Position = mvp * vec4(finalPos , 1.0) ; 
    fragPos = finalPos ;
	// fragPos = pos + vec3(0.0, 0.1, 0.0) * sin(time);
	// gl_Position = mvp * vec4(pos + vec3(0.0, 0.1, 0.0) * sin(time), 1.0);
    // Pass position and normal through to fragment shader
    fragPos = pos;
    fragNormal = normal;
}