#version 430

// Output for on-screen color
layout(location = 0) out vec4 outColor;

layout(location = 1) uniform vec3 lightDir;
layout(location = 2) uniform vec3 view_pos;
layout(location = 3) uniform float time;

uniform sampler2D shadowMap;

in vec3 fragPos; // World-space position
in vec3 fragNormal; // World-space position
in vec4 shadowMapPos;

const vec4 ambient = vec4(0.1,.14,0.18,0.1);
const float bias = 0.011;

float ShadowCalculation(vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // check whether current frag pos is in shadow
    
    
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    return shadow;

}  

void main() {
    float shadow = ShadowCalculation(shadowMapPos);
    if(shadow == 1.)
    {
        outColor = ambient;
    }
    else 
    {
        float difFact = dot(-lightDir, fragNormal);
        if(difFact<0.)
            outColor = ambient;
        else{
            outColor = ambient + difFact * vec4(0.25,.35,0.45,0.1) * fragPos.z * 8.;

            vec3 toEye = normalize(view_pos - fragPos);
            vec3 reflect = lightDir + 2. * difFact * fragNormal;
            float specFact = dot(toEye,reflect);
            if(specFact>0.)
                outColor += pow(specFact,8.0) * vec4(0.25,.35,0.45,0.1);
            //foam effect.. not a good one..
            // if(fragPos.z > 0.011)
            // {
            //     float rand = fract(sin(time + fragPos.x)*100000.0);
            //     if( rand > .982)
            //         outColor = vec4(0.9,0.9,0.9,1.0);
            //     else if( rand > 0.978)
            //         outColor = vec4(0.85,0.85,0.85,1.0);
            // }
        }
    }
    
}