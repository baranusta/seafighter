#version 430

// Model/view/projection matrix
layout(location = 0) uniform mat4 mvp;
layout(location = 2) uniform vec3 view_pos;
layout(location = 3) uniform float time;
layout(location = 6) uniform vec3 newPos;
layout(location = 7) uniform float size;


// Per-vertex attributes
layout(location = 0) in vec3 pos; // World-space position
layout(location = 1) in vec3 normal; // World-space normal

out vec3 fragPos;
out vec3 fragNormal;

void main(void) {
    
	view_pos;

    vec3 animation = vec3(pos.x,pos.y + cos(time * 5.)/4.,pos.z);
    vec3 finalPos = pos + newPos + vec3(pos.x*size, pos.y*size, pos.z*size);
    finalPos = pos + newPos +  vec3(pos.x*size, pos.y*size, pos.z*size);
    
    // Transform 3D position into on-screen position
    gl_Position = mvp * vec4(finalPos, 1.0);

    // Pass position and normal through to fragment shader
   fragPos = finalPos + animation;
   fragNormal = normal;

}

