#version 430

// Output for on-screen color
layout(location = 0) out vec4 outColor;

layout(location = 1) uniform vec3 lightPos;
layout(location = 2) uniform vec3 view_pos;


layout(location = 4) uniform vec4 ambient;
layout(location = 5) uniform vec4 diffuseColor;
layout(location = 6) uniform vec4 specConst;

in vec3 fragPos; // World-space position
in vec3 fragNormal; // World-space position
in vec4 shadowMapPos;

uniform sampler2D shadowMap;



float ShadowCalculation(vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // check whether current frag pos is in shadow
    float shadow = currentDepth > closestDepth  ? 1.0 : 0.0;

    return shadow;
}  



void main() {
    shadowMapPos;
    vec3 lightRay = normalize(lightPos - fragPos);
    float diffuseFact = dot(lightRay, fragNormal);
    if(lightPos.z > 0. && diffuseFact > 0.)
    {        
        vec3 toEye = normalize(view_pos - fragPos);
        vec3 reflect = -lightRay - 2. * (dot(fragNormal,-lightRay)) * fragNormal;
        float specFact = pow(dot(toEye,reflect),16.);
        outColor = ambient + diffuseFact * diffuseColor + specFact * specConst;
    }
    else
        outColor = ambient;
}