#version 430

// Global variables for lighting calculations
layout(location = 1) uniform vec3 viewPos;
layout(location = 2) uniform sampler2D texToon;
layout(location = 3) uniform float time;

// Output for on-screen color
layout(location = 0) out vec4 outColor;

const vec3 lightPos = vec3(-1. , 1.0 , 1.);
// Interpolated output data from vertex shader
in vec3 fragPos; // World-space position
in vec3 fragNormal; // World-space normal

//1 = Blinn-phong
//2 = Toon
//3 = X_Toon
const int shaderType = 3;

void main() {
    vec3 lightRay = normalize(lightPos - fragPos);
    vec3 toEye = normalize(viewPos - fragPos);
    vec3 reflect = -lightRay - 2. * (dot(fragNormal,-lightRay)) * fragNormal;
    float specFact = dot(toEye,reflect);
    float color = dot(lightRay, fragNormal);
    switch (shaderType)
    {
        case 1:
        if(specFact > 0.)
            color = color + pow(specFact,16.);
        outColor = texture(texToon , vec2(color , 1.)); 
        break;
        case 2:
            color = floor(color * 5) / 5;
            if(specFact > 0.8)
                color = color + 0.2;
            outColor = texture(texToon , vec2(color, 1.0)); 
            break;
        case 3:
            float dist = length(viewPos - fragPos) - 0.5;
            outColor = texture(texToon , vec2(color , dist)); 
            break;
        default:
        break;
    }
}