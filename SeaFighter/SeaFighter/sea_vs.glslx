#version 430

// Model/view/projection matrix
layout(location = 0) uniform mat4 mvp;
layout(location = 2) uniform vec3 view_pos;
layout(location = 3) uniform float time;
layout(location = 4) uniform float min_X;
layout(location = 5) uniform float min_Y;

// Per-vertex attributes
layout(location = 0) in vec3 pos; // World-space position
layout(location = 1) in vec3 normal; // World-space normal

#define M_PI 3.1415926535897932384626433832795

out vec3 fragPos;

void main(void) {
    view_pos;
    // float val = -0.7 * pos.x + t - 2.;
    // float mean = 0.;
    // float var = 0.;
    // float y = 1./(sqrt(2* M_PI * var)) * exp(-(pos.x - mean)/(2 * var * var));
    // if(pos.y > val - 0.2 && pos.y< val +0.2 )
    //     gl_Position = mvp * vec4(pos.x,pos.y,1.,1.0);
    // else
    vec3 distanceVec = vec3(pos.x - min_X,pos.y - min_Y,0);
    float length = length(distanceVec);
    float t = fract(time) * length ;
    float wavelength = length * 0.1;
    gl_Position = mvp * vec4(pos.x,pos.y,(cos(pos.x * 5 + time) + sin(pos.y * 5 + time))/50 ,1.0);

}